1. cp (Copy)
- 파일을 복사
- 디렉토리는 복사 안됨 (= 옵션 필요)

명령어)
cp [옵션] [원본] [대상]

옵션)
-i	: interaction, 이미 존재하는 파일시 질의 (CentOS alias 기본 설정)
-r	: recursive, 디렉토리 복사
-p	: preserve, 권한, 소유자/소유그룹, 날짜를 그대로 복사


ex) itbank 계정으로 실습
1. cp /etc/login.defs .
- login.defs를 현재(.) 디렉토리로 복사
- 이때, ls -l로 살펴보면 권한, 소유자/그룹, 날짜가 현재 계정에 맞게 변경되어 복사됨

2. cp -i /etc/login.defs .
- 현재 위치엔 이미 login.defs 파일이 있음
- -i 옵션 없이 사용시 바로 덮어씀 (= 계정마다 다를 수 있음)
- -i 옵션이 있으면 덮어쓸지 질의함 (yes/no를 입력 하면 됨)

3. cp -p /etc/login.defs test.defs
- -p는 파일의 정보를 그대로 보존해서 복사한다
- 단, 일반 계정의 경우엔 소유자와 소유그룹은 보존이 되지 않음
- 자신의 소유자/소유그룹으로 변경된다
- 또 복사 대상에 파일명을 명시하면 이픔을 변경하며 복사 가능


2. rm (remove)
- 파일을 제거하는 명령어
- 디렉토리는 제거 불가 (= 옵션을 주면 가능)

명령어)
rm [옵션] [대상]

옵션)
-i	: interaction, 삭제시 질의
-r	: recursive, 디렉토리 삭제
-f	: force, 강제 삭제 (질의 x)

ex)
rm test.txt	질의 후 삭제 (yes/no를 입력)
rm -f test.txt	질의 없이 바로 삭제

rm -r test/	디렉토리 제거 (안의 파일 수만큼 질의 발생)
rm -rf test/	질의 없이 디렉토리 제거

rm -rf *	현재 디렉토리 내 모든(*) 파일 제거 (주의)



3. filtering
- 특정 문자열 패턴을 지정해서 지정 파일을 걸러낸다

실습) /test안에 아래 파일들을 생성한다
1 11 12 111 112 122 1111 1112 1122 1222
2 22 21 222 221 211 2222 2221 2211 2111

* : 모든 문자 (문자 개수 상관 x)

ls -l *		모든 문자 패턴
ls -l 1*	1로 시작하는 패턴
ls -l *1	1로 끝나는 패턴
ls -l *1*	1을 포함하는 패턴

? : 모든 문자 1개 (문자가 무조건 있어야함)

ls -l ?		글자가 1개인 패턴
ls -l ??	글자가 2개인 패턴
ls -l ???	글자가 3개인 패턴
ls -l 2?	첫글자가 2인 2자리 패턴
ls -l ?2?	중간이 2인 3자리 패턴


4. alias
- 별칭
- 지정 명령어에 별칭을 붙여서 사용하는 방식
- 긴 명령어나 옵션이 많은 명령을 줄여쓰는 매크로

명령어)
alias 이름='명령어'

- alias만 작성하면 '현재 계정'에 등록된 alias를 출력
- 즉, alias는 계정마다 별도로 저장됨
- ''를 펼쳐서 여러 명령어를 등록할 수도 있다
- 다른 alias를 alias에 등록할 수도 있다

5. unalias
- 별칭 해제
- 지정 alias를 해제

명령어)
unalias 이름

※ alias 명령으로 등록한 별칭은 재부팅시 제거됨
- 영구적으로 등록하려면 홈디렉토리의 .bashrc나 .bash_profile에 등록해야 한다


6. cat : concatenate, 엮다
- 문서 파일을 콘솔에 출력해서 확인하거나
- 다른 문서끼리 합쳐서 저장 가능한 명령어

명령어)
cat [옵션] [파일명]

옵션)
-n	numline, 줄번호를 같이 출력

실습)
/etc/passwd를 현재 디렉토리에 복사 후 진행
cat passwd	: 파일 전체 내용을 콘솔에 출력
cat -n passwd	: 줄번호를 붙여 출력

7. head
- 문서 최상단부터 10줄을 출력
- 옵션으로 출력할 줄 수 설정 가능

명령어)
head -[줄수] [파일명]


8. tail
- 문서 최하단부터 위로 10줄을 출력
- 옵션으로 출력할 줄 수 설정 가능

명령어)
tail -[줄수] [파일명]

※ head와 tail은 줄 번호를 띄우는 옵션이 없다
- 이는 아래 설명할 다중 명령어 기호로 처리가 가능

1) ;	: 문단의 끝. 한 줄로 여러 명령어 실행시 사용
2) &&	: and, 앞의 명령이 성공하면 뒤의 명령도 이어서 수행
3) ||	: or, 앞의 명령이 실패하면 뒤의 명령을 수행
4) |	: pipe, 앞의 명령 실행 결과를 뒤의 명령 인자값으로 사용

※ echo [내용] : 표준 출력 명령어


9. more
- 지정한 내용만큼만 화면에 출력
- 지정 키를 입력하면 화면을 넘기며 문서 확인 가능
- 주로 단독으로 사용보단 |로 더 자주 사용된다

명령어)
more -[줄수] [파일명]

키)
- enter : 한 줄 씩 넘기기
- space : 지정 줄 씩 넘기기
- b : 지정 줄 씩 뒤로 넘기기
- q : 빠져 나오기


10. 입출력 기호
< : 입력 (읽기)
> : 출력 (쓰기)
>> : 출력 (쓰기)

실습)
echo hello		: 콘솔에 출력
echo hello > test1.txt	: test1.txt에 출력 (덮어쓰기)
echo hello >> test1.txt	: test1.txt에 출력 (맨 뒤 추가)

cat < test1.txt		: cat은 기본이 <라 생략 가능

cat > ex01.txt
- 작성한 내용을 ex01.txt에 출력
- 다 작성 후 빈 줄 추가 후 ctrl + d를 누르면 저장됨

cat ex01.txt test1.txt
- ex01.txt를 출력 후 test1.txt를 출력
- 즉, 두 문서를 이어서(concatenate) 출력

cat ex01.txt test1.txt > result.txt
- 이어놓은 두 문서의 내용을 새파일(result.txt)에 출력

ls -l / > lsResult.txt
- ls의 결과를 새 파일에 출력