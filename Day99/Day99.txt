AWS 기반 어플리케이션 개발

AWS Builder Labs
http://lab-dev.applaycrew.com 접속 (다음주부터는 유효한지 모른다)
http://dev-class.applaycrew.com/ = 수업자료
aws 계정 로그인으로 가입

다음주 부터 접속해보고 싶으면
https://us-east-1.student.classrooms.aws.training/class/xqadb1aV2J3h5iALKZyJ4q

Bookshelf
교재는 2년 접근 가능


AWS 어떤 기능?
기능 활용해서 어플리케이션 동작 가능?

Cloud Practitioner Essentials 이수
Technical Essentials 이수

클라우드 컴퓨팅
컴퓨팅 리소스들을 네트워크를 통해서 빠른 속도(생성 속도)로 지원 (리소스가 만들어지는 속도가 차이점/ 온프로미스 환경과 차이점)

온디맨드로 서비스 액세스
필요에 따라 컴퓨팅 리소스 프로비저닝
사용한 만큼만 요금을 지불 (리소스 수 만큼 요금 청구 / 자동으로 늘리고 줄여줌 (탄력성을 가지는 인프라))

서버가 늘거나 줄어도 정상적으로 작동하게 처리 (서버에 기능만 구현 / 데이터는 참조, 데이터는 다른 곳에 저장해야 함)

속도 및 민첩성 향상
용량 추정 불필요 (용량 확보 고민 해결)
비용 절감 목표 실현 (리소스 확보 정도를 조절)
몇 분 만에 전세계 배포

네트워크 구성, 서버 생성

글로벌 인프라를 선택해서 운영됨
단위
- 리전 : 가장 큰 단위 / 가장 먼저 선택 (지역)
	기준
	- 지연 시간 (거리에 따른 지연 / 데이터 규정이 아니면 우선 순위)
	- 요금 (리전마다 요금 기준이 다름 / 차이는 리전 운용 비용)
	- 서비스 가용성 (내가 요구하는 기능이 작동하는가)
	- 데이터 규정 준수 (우선 순위 / 개인 정보 등을 관리해야함, 개인정보보호법 등 다른 곳에 저장되면 안 됨, 해당 국가에 데이터를 저장해야 함)

- 가용 영역 : 하나 이상의 데이터 센터로 구성 / 리전을 구성하는 요소 / 가용 영역 단위 장애에 대응하기 위한 방법
가용영역에 같은 서비스를 구축해서 한 쪽에 장애가 발생해도 문제가 발생하지 않게 구축 (오토스케일링을 통하여 용량은 변하지 않게 가능)
기본 3개 이상 (서울은 4개)

- 엣지 로케이션
이용 고객이 글로벌하게 분포되어 있을 때 
각 리전마다 컨텐츠 저장 (리전 저장 비용 증가, 관리 해야 할 시스템 증가), 이는 해결 방법이 아님

테두리는 리전 단위, 접근 지점이 고객 코 앞 리전에 생성 됨
원본은 선택 리전, 고객과 가까운 위치의 엣지 로케이션에 접근해서 데이터를 받아 감

클라우드 프론트 : 엣지 로케이션을 활용하여 빠른 속도로 고객에게 데이터를 제공할 수 있음

서비스 관리
- AWS 관리 콘솔 (웹브라우저로 컨트롤, 그래픽 환경, 수작업으로 처리해야 함)
- AWS CLI (명령창)
- AWS SDK (개발 툴, 요청을 만들고 AWS에 전송(API Call 방식으로 제작), 인증 정보가 없으면 aws에서 거부, api call 제작을 어떻게 해야 하는가 / SDK에서는 함수 호출만 하면 끝)

개발자가 알아야 할 것 : 기능 결정, api call 제작(SDK 활용)


계정 설정
리전 : 서울 (ap-northeast-2 : 리전 코드)
언어 : builder-laps 실습 시 버튼 찾기 수월하기 위해 영어로 변경 권장

AWS 루트 사용자
이메일로 접속 = 루트로 접속

루트 특징
- 모든 권한 다 가지고 있음
- 권한 제어가 안 된다
* 노출이 안 되면 큰일이 난다

MFA 설정
Security credentials -> IAM(Identity인증 and Access Management권한 제어)으로 이동 -> Root User 확인 -> MFA 등록 버튼 클릭 -> 이름 입력 및 스마트폰 모양 인증 방식 클릭

Google Authenticator 앱 설치 후 보이는 숫자 6개를 MFA code 1에 입력 -> 시간 만료 후 다음 숫자를 MFA code 2에 입력

폰을 변경시에는 MFA Remove 후 앱 삭제 및 폰 변경

Users
사용자 생성 및 제거

생성
create user 클릭 -> 이름 입력(로그온 할 때 쓸 이름) -> Management Console(그래픽 환경) 체크 -> type IAM user 선택 -> password custom 선택 -> next-sign 체크 해제 (자신의 것일 경우에만)

권한 설정
attach 체크 -> administratorAccess 체크 (권장 사용방법은 아님, root와 유사)

root 확인
billing and cost management 확인 해야 함 -> root 로그인 자주하면 안 되므로 user에게 보여지게 설정

IAM user and role access to Billing information 옆의 edit 클릭 -> Activate IAM Access 체크

운영자용 사용계정 생성 -> root 오프

root만 가능한 것
support plan 수정

사용자 로그온
root의 iam Account 복사 후 등록한 사용자로 로그인

용량이 부족하면 돈을 내기 보다는 새로운 계정을 생성해서 유지

청구 사항을 일주일에 한번 정도는 확인 필요(계정이 필요 없다면 삭제하는 것도 고려)


Amazon VPC (Virtual Private Cloud)
네트워크 구성 (서버 생성)

인터넷과의 통신 여부
퍼블릭 서브넷 -> 인터넷으로 접근 가능, 인터넷으로 통신 가능
프라이빗 서브넷 -> 인터넷에서 연결 안 되어 있음 (NAT : 공유기 역할 로 인터넷 통신이 가능하게 함 (퍼블릭 서브넷에 배치)) 가용 영역 안에서는 통신이 가능

NACL
내가 지정한 네트워크 시작점에서 오는 요청들을 차단할 수 있다
우선 전부 열어둠

보안 그룹(방화벽)
내가 지정한 시작점에서 프로토콜로 들어오는 요청을 받을 수 있다
우선 전부 닫아둠(반드시 등록해서 열어야 한다), 무조건 적용

리전 확인(다른 리전에서 접속을 하거나 생성을 하면 접속이 안될 수 있다)

Create VPC
vpc and more 체크 (VPC only를 선택하면 일일히 생성해야 함)

cidr block (어떤 ip 주소 범위) 건드리지 않는다

Availability Zones = 고가용성 용량
2a, 2c 설정 (1, 3번째 설정. 가상 서버 형태 중 t2-micro가 무료인 가용 영역(2,4번째는 t2-micro가 생성이 안 되거나 유료))
subnet 2
private subnet 2
NAT gateways (무료가 없음 / 1개만 생성하고 방치해도 비용 청구, 기업에서는 사용(장애 걱정이 없다))
VPC endpoints None (S3 Gateway는 내일 공부)

public subnet은 route table에 igw가 등록되어 있다 (인터넷이 등록되어 있다)
private subnet은 igw가 등록되어 있지 않다


Elastic Compute Cloud
서버 생성 (EC2) 및 관리

언제든 크기 조장한 컴퓨팅 용량 (auto scaling을 설정하면 알아서 조정)
몇 분 내에 프로비저닝 및 시작 가능
시간/초 단위로 용량 사용량에 해당하는 비용 지불 (라이센스 없는 운영체제 : 초 단위 / 있는 운영체제 : 시간 단위)

사전 설정
Security groups (EC2에서도 설정 가능하나 여기가 원래 위치)
트래픽 제어 환경 설정

create security group
name : 이름 설정
Description : Allows SSH/HTTP
VPC : 만든 vpc 체크

outbound 모두 허용 / inbound는 설정 없음

outbound는 건드리지 않음
inbound에는 SSH, Anywhere-IPv4(본래는 My IP로 설정. 설정하면 지정 컴퓨터에서만 접속)
HTTP, Anywhere-IPv4(웹은 기본 설정)

Tag : 관리 유용, 태그 필터링 가능 (없으면 - 표시)

DB Security 설정
Allows SSH/MySQL
만든 vpc 체크

outbound 설정 x
inbound에는 SSH, Anywhere-IPv4
MYSQL, 10.0.0.0/16 (VPC 안에 있는 서버만 요청을 보낼 수 있음)


EC2의 가상 서버 = Instances

Web Server 1
AMI(운영체제 + 이미지) : Ubuntu 22.04 LTS
Instance type : t2.micro
key pair : 원격접속할 때 사용하는 인증 수단 (기본 보안 설정)
	key pair name 설정 (보관 중요 / 없으면 원격 접속 불가)
network
	vpc : test-vpc
	subnet : public1
	public IP : enable
	만든 것 중 선택 : select existing security group
	web service-sg
storage : 수정 x
advanced detail
	metadata accessible
	metadata version(인스턴스 추가 정보) : v1 and v2 (token optional)
	allow tags in metadata : enable
	instance가 생성되고 user data에 작성된 내용을 자동 실행 함
	보통 내부 규정 or 실행될 때 필요한 리소스 등록 용도

DB 서버
subnet 설정을 private가 아닌 public2번에 생성
user data 
private일 때는 Turn on password 등록해서 ID/PW 로그인 방식으로 DB에 로그인 함
public일 때는 key pair로 로그인 할 것이라 보안 상의 이유로 위의 내용을 지워도 된다


putty.exe, puttygen.exe
다운로드 받은 파일은 비대칭키(공개키, 개인키 방식)에서 puttygen을 활용해서 개인키를 추출해서 사용

puttygen실행 -> conversions밑의 import key 실행 -> .pem 등록 -> save the private key 저장 -> passphrase(개인키 패스워드 등록) -> 이름은 동일하게 .ppk로 저장

public ipv4 address를 ip address에 작성 후 port 22 ssh
ssh의 auth / credential에 ppk 등록 후 open
최초 한 번 accept 후 ubuntu로 접속하면 패스워드 없이 접속 성공

sudo vi /var/www/html/basic/login/dbconn.php
mysql_hostname = 'DB서버의 private ip 등록';