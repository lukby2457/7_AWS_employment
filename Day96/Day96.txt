파일 디스크립터 (FD)
- 파일을 다루기 위한 추상적인 데이터

0	: 표준 입력
1	: 표준 출력
2	: 표준 에러 출력

ex)
cat < test1.txt == cat 0< test1.txt
- 좌우는 동일한 구문
- 0은 입력이고 기본적으로 생략해도 된다

ls test1.txt >> success.txt == ls test1.txt 1>> success.txt
- 표준 출력 >, >>는 기본적으로 1의 FD를 가진다
- 따라서, 올바른 출력만 지정 파일에 출력(= 작성)된다

ls hello 2>> fail.txt
- FD 2는 표준 에러를 의미
- 즉, 에러 메세지만 지정 파일에 출력

※ find는 뒤에서 자세히
- 실습은 itbank 계정으로 진행

1. find / -name "*ssh*"
- 모든 출력(= 정상/에러)이 콘솔에 출력

2. find / -name "*ssh*" 2>> fail.txt
- 에러 출력(2)은 모두 fail.txt에
- 즉, 콘솔에는 정상 출력만

3. find / -name "*ssh*" 2>> /dev/null
- 에러 출력(2)은 모두 /dev/null 장치 파일에 출력
- /dev/null은 필요 없는 결과 및 출력을 버리는 장비
- 즉, 에러 같은 출력을 남기고 싶지 않을 때 자주 사용

4. find / -name "*ssh*" >> success.txt
- 표준 출력(1)은 모두 success.txt에
- 에러 출력은 지정되지 않았으므로 콘솔에 출력
- 성공한 결과만 파일로 남기고 싶은 경우 사용

5. find / -name "*ssh*" > total.txt 2>&1
- 표준 출력(1)은 total.txt에 출력
- 표준 에러(2)는 표준 출력(1)과 같은 파일에 출력
- 즉, 모든 출력이 total.txt에 출력됨
- 가독성이 떨어지기 때문에 별로 권장하진 않음

6. find / -name "*ssh*" > success.txt 2> fail.txt
- 표준 출력(1)은 success.txt에 출력
- 표준 에러(2)는 fail.txt에 출력
- 별도로 관리하기 때문에 가독성 및 유지보수에 효과적


1. find
- 특정 파일을 찾기 위한 명령어

명령어)
find [경로] [옵션] [대상]

옵션)
-name		이름으로 검색
-empty		파일 크기가 0byte 파일
-type		파일의 유형으로 검색
-atime		접근시간(access)으로 검색
-mtime		수정시간(modify)으로 검색
-ctime		변경시간(change)으로 검색
-exec		검색 결과를 다른 명령어에 연결시 (find는 pipe(|)가 먹지 않는다)

※ mtime : 파일의 내용이나 이름이 변경시 적용
※ ctime : mtime + 속성/권한/소유자 변경시 적용
※ touch로 변경되는 시간은 atime, mtime
※ 즉, ctime은 절대로 임의 변경이 불가능

ex)
find -name "*itbank*"
- itbank라는 이름을 포함한 파일 및 디렉토리를 검색

find -name "*itbank*" -exec ls -ld {} \;
- find로 찾은 내용을 -exec에 작성된 명령어에 넘긴다
- 넘긴 데이터는 {}에 채워진다

find -name "*itbank*" -exec ls -ld {} \; 2> /dev/null
- 위랑 결과는 동일. 단, 에러 메세지는 모두 버린다

find / -name "*itbank*" -type f
- 이름에 itbank를 포함하는 파일 중 일반파일만 검색
- f는 일반파일, d는 디렉토리 

find . -name "*test*" -empty -exec rm -rf {} \;
- 현재 디렉토리(.)에서 test라는 이름을 포함한 빈 파일을 찾는다
- 검색된 파일은 rm -rf에 전달되어 삭제된다


※ stat 파일명 : 파일의 속성 정보를 출력

find . -mtime -1
- mtime이 1일이 지나지 않은 파일 검색
ex) 현재 : 29일 11:30, 파일 : 28일 12:30

find . -mtime 1
- mtime이 1일이 지나고 2일이 되지 않은 파일 검색

find . -mtime +1
- mtime이 2일이 넘은 파일 검색

분으로 찾기 : amin


git ignore
.gitignore 파일 생성 후 파일명 등록
이미 커밋이 된 파일은 ignore에 등록해도 적용이 되지 않는다

putty에서 ctrl+s : 일시 정지 (이를 해제하려면 ctrl+q)


vi (visual editor)
- Linux의 대표적인 텍스트 편집기
- 3가지 모드로 나뉘어서 동작한다

1. 이동 모드
- 편집할 위치로 커서를 이동 시키거나
- 특정 위치의 내용을 제거/복사할 수 있음

*커서 이동
h : 좌
j : 하
k : 상
l : 우

단어 이동
w : 다음 단어 첫 글자
e : 현재 단어 첫 글자. 이미 끝이면 다음 단어 끝 글자로 이동
b : 현재 단어 첫 글자. 이미 처음이면 이전 단어 첫 글자로 이동

행 내 이동
0 : 행의 첫 글자로
$ : 행의 마지막 글자로

페이지 이동
ctrl + f : 다음 페이지
ctrl + b : 이전 페이지

*문서 내 이동
gg : 문서 제일 처음
G : 문서 제일 끝
숫자G : 지정 줄로 이동

삭제
x : 커서 위의 글자 하나 제거
u : 되돌리기
ctrl + r : 앞으로 되돌리기
dd : 현재 커서가 있는 1줄을 제거 (줄 자체가 제거됨)
숫자dd : 현재 커서부터 n줄을 제거

dG : 현재 커서부터 문서 끝까지 제거
dgg : 현재 커서부터 문서 처음까지 제거

※ dd는 사실 잘라내기이다. 붙여넣기로 다른 곳에 입력 가능
※ d + 이동 커맨드로 한번에 제거하는 효과를 가질 수도 있다

복사
yy : 현재 커서가 있는 1줄을 복사
p(소) : 현재 커서 아래 붙여넣기
P(대) : 현재 커서 위에 붙여넣기

숫자yy : 현재 커서부터 n줄을 복사

yG : 현재 커서부터 문서 끝까지 복사
ygg : 현재 커서부터 문서 처음까지 복사

2. 입력 모드
*i : 커서 앞에서 부터 입력 진입
*a : 커서 뒤부터 입력 진입
*o : 커서 아래 줄을 생성하며 입력 진입
s : 현재 커서 위의 글자 하나를 지우며 입력 진입
esc : 입력 모드를 빠져나와 이동 모드로 진입

I : 현재 행 제일 앞에 입력 진입
A : 헌재 행 제일 뒤에 입력 진입
O : 커서 윗 줄을 생성하며 입력 진입
S : 현재 행을 모두 지우며 입력 진입

3. 실행(ex) 모드
:set nu : 줄번호 출력
:set nonu : 줄번호 제거
:q : 저장하지 않고 종료 (편집시 실행 안됨)
:q! : 저장하지 않고 강제 종료
:w : 저장
:w [파일명] : 새 파일 혹은 다른 이름으로 저장
:wq : 저장 후 종료
:wq [파일명] : 새 파일 혹은 다른 이름으로 저장 후 종료
:enew : 새 문서 열기

화면 분할
:sp [파일명] : 창을 분할해서 새 문서 열기
ctrl + ww : 분할된 창 이동

:vs [파일명] : 창을 세로로 분할 (vim에서만 가능)

vi 내에서 명령어 사용
:!명령어 : 창을 잠시 내리고 명령을 수행
:.!명령어 : 명령 수행 결과를 현재 행부터 삽입

※ cd는 .을 붙이지 않고 그냥 사용해야 한다


단어 검색
/키워드 : 지정 키워드를 찾는다
n : 단어를 아래쪽으로 계속 검색
N : 단어를 위쪽으로 계속 검색

※ 다 검색하면 한 바퀴 돈다


단어 치환
:s/파일/file
- 현재 커서가 있는 줄에서 파일 -> file로 치환

:s/이/e/g
- 현재 커서가 있는 줄에서 이 -> e로 모두 치환

:6s/적용/apply
- 지정 줄(6행)의 적용 -> apply로 치환

:8,12s/ctrl/alt
- 8 ~ 12행 사이의 ctrl -> alt로 치환

:%s/t/ㅜ/g
- 문서 전체에서 t -> ㅜ로 치환